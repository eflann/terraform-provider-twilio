/*
 * Twilio - Studio
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.0.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"fmt"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"github.com/twilio/terraform-provider-twilio/twilio"
	types "github.com/twilio/twilio-go/studio/v2"
)

func resourceFlows() *schema.Resource {
	return &schema.Resource{
		Create: resourceFlowsCreate,
		Read:   resourceFlowsRead,
		Update: resourceFlowsUpdate,
		Delete: resourceFlowsDelete,
		Schema: map[string]*schema.Schema{
			"definition": {
				Type:     schema.TypeString,
				Required: true,
			},
			"friendly_name": {
				Type:     schema.TypeString,
				Required: true,
			},
			"status": {
				Type:     schema.TypeString,
				Required: true,
			},
			"commit_message": {
				Type:     schema.TypeString,
				Optional: true,
			},
		},
	}
}

func resourceFlowsCreate(d *schema.ResourceData, m interface{}) error {
	params := resourceFlowsParams(d)

	r, err := m.(*Config).Client.StudioV2.FlowsCreate(params)

	if err != nil {
		return fmt.Errorf("error with FlowsCreate: %s", err)
	}

	d.SetId(*r.Sid)

	return resourceFlowsRead(d, m)
}

func resourceFlowsDelete(d *schema.ResourceData, m interface{}) error {
	r, err := m.(*Config).Client.StudioV2.FlowsDelete(d.Id())

	if err != nil {
		return fmt.Errorf("error with FlowsDelete: %s", err)
	}

	return nil
}

func resourceFlowsRead(d *schema.ResourceData, m interface{}) error {
	r, err := m.(*Config).Client.StudioV2.FlowsRead(d.Id())

	if err != nil {
		return fmt.Errorf("error with FlowsRead: %s", err)
	}

	d.Set("definition", r.Definition)
	d.Set("friendly_name", r.FriendlyName)
	d.Set("status", r.Status)
	d.Set("commit_message", r.CommitMessage)

	return nil
}

func resourceFlowsUpdate(d *schema.ResourceData, m interface{}) error {
	params := resourceFlowsParams(d)

	r, err := m.(*Config).Client.StudioV2.FlowsUpdate(d.Id(), params)

	if err != nil {
		return fmt.Errorf("error with FlowsUpdate: %s", err)
	}

	return resourceFlowsRead(d, m)
}

func resourceFlowsParams(d *schema.ResourceData) *types.FlowsCreateParams {
	params := &types.FlowsCreateParams{
		Definition:   d.Get("definition").(*map[string]interface{}),
		FriendlyName: d.Get("friendly_name").(*string),
		Status:       d.Get("status").(*string),
	}

	if v, ok := d.GetOk("commit_message"); ok {
		params.CommitMessage = v.(*string)
	}

	return params
}
