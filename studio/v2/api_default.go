/*
 * Twilio - Studio
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.0.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package v2

import (
	"context"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/twilio/terraform-provider-twilio/client"
	"github.com/twilio/terraform-provider-twilio/util"
	types "github.com/twilio/twilio-go/studio/v2"
)

func ResourceFlows() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceFlowsCreate,
		ReadContext:   resourceFlowsRead,
		UpdateContext: resourceFlowsUpdate,
		DeleteContext: resourceFlowsDelete,
		Schema: map[string]*schema.Schema{
			"definition": {
				Type:     schema.TypeString,
				Required: true,
			},
			"friendly_name": {
				Type:     schema.TypeString,
				Required: true,
			},
			"status": {
				Type:     schema.TypeString,
				Required: true,
			},
			"commit_message": {
				Type:     schema.TypeString,
				Optional: true,
			},
		},
	}
}

func resourceFlowsCreate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := &types.FlowsCreateParams{
		Definition:   util.String(d.Get("definition").(string)),
		FriendlyName: util.String(d.Get("friendly_name").(string)),
		Status:       util.String(d.Get("status").(string)),
	}

	if v, ok := d.GetOk("commit_message"); ok {
		params.CommitMessage = util.String(v.(string))
	}

	r, err := m.(*client.Config).Client.StudioV2.FlowsCreate(params)

	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(r.Sid)

	return resourceFlowsRead(ctx, d, m)
}

func resourceFlowsDelete(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	err := m.(*client.Config).Client.StudioV2.FlowsDelete(d.Id())

	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func resourceFlowsRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	r, err := m.(*client.Config).Client.StudioV2.FlowsRead(d.Id())

	if err != nil {
		return diag.FromErr(err)
	}

	d.Set("definition", r.Definition)
	d.Set("friendly_name", r.FriendlyName)
	d.Set("status", r.Status)
	d.Set("commit_message", r.CommitMessage)

	return nil
}

func resourceFlowsUpdate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	params := &types.FlowsUpdateParams{

		Status: util.String(d.Get("status").(string)),
	}

	if v, ok := d.GetOk("commit_message"); ok {
		params.CommitMessage = util.String(v.(string))
	}

	if v, ok := d.GetOk("definition"); ok {
		params.Definition = util.String(v.(string))
	}

	if v, ok := d.GetOk("friendly_name"); ok {
		params.FriendlyName = util.String(v.(string))
	}

	_, err := m.(*client.Config).Client.StudioV2.FlowsUpdate(d.Id(), params)

	if err != nil {
		return diag.FromErr(err)
	}

	return resourceFlowsRead(ctx, d, m)
}
